version: '3.8'

name: mu2mi

services:
    # web-migration:
    #     build:
    #         context: .
    #         dockerfile: migration.Dockerfile
    #         target: migration
    #     container_name: web-migration
    #     restart: on-failure
    #     environment:
    #         - DATABASE_URL=${DATABASE_URL}
    #     depends_on:
    #         postgres:
    #             condition: service_healthy
    #     network_mode: host

    bucket-creation:
        build:
            context: .
            dockerfile: bucket-creation.Dockerfile
            target: bucket-creation
        container_name: bucket-creation
        restart: on-failure
        environment:
            - S3_ENDPOINT=${S3_ENDPOINT}
            - S3_PORT=${S3_PORT}
            - S3_USE_SSL=${S3_USE_SSL}
            - S3_ACCESS_KEY=${S3_ACCESS_KEY}
            - S3_SECRET_KEY=${S3_SECRET_KEY}
            - S3_BUCKET_NAME=${S3_BUCKET_NAME}
            - S3_BUCKET_REGION=${S3_BUCKET_REGION}
        depends_on:
            minio:
                condition: service_healthy
        network_mode: host

    postgres:
        image: postgres:16.1-alpine3.19
        container_name: postgres
        restart: unless-stopped
        environment:
            - PGUSER=postgres
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        volumes:
            - postgres-data:/var/lib/postgresql/data
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready']
            interval: 1s
            timeout: 5s
            retries: 10

    redis:
        image: redis:7.2.4-alpine
        container_name: redis
        restart: unless-stopped
        command: redis-server --save 60 1 --loglevel warning
        volumes:
            - redis-data:/data
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 1s
            timeout: 5s
            retries: 10

    minio:
        image: quay.io/minio/minio:RELEASE.2024-01-18T22-51-28Z
        container_name: minio
        restart: unless-stopped
        command: server /data --console-address ":${S3_CONSOLE_PORT}"
        environment:
            - MINIO_ROOT_USER=${S3_ACCESS_KEY}
            - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
        ports:
            - ${S3_PORT}:${S3_PORT}
            - ${S3_CONSOLE_PORT}:${S3_CONSOLE_PORT}
        volumes:
            - minio_data:/data
        healthcheck:
            test: ['CMD', 'mc', 'ready', 'local']
            interval: 1s
            timeout: 5s
            retries: 10

volumes:
    postgres-data:
        driver: local
    redis-data:
        driver: local
    minio_data:
        driver: local
