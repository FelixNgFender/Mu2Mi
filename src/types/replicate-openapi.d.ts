/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/v1/collections': {
        /**
         * List collections of models
         * @description Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/collections
         * ```
         *
         * The response will be a paginated JSON list of collection objects:
         *
         * ```json
         * {
         *   "next": "null",
         *   "previous": null,
         *   "results": [
         *     {
         *       "name": "Super resolution",
         *       "slug": "super-resolution",
         *       "description": "Upscaling models that create high-quality images from low-quality images."
         *     }
         *   ]
         * }
         * ```
         */
        get: operations['collections.list'];
    };
    '/v1/collections/{collection_slug}': {
        /**
         * Get a collection of models
         * @description Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/collections/super-resolution
         * ```
         *
         * The response will be a collection object with a nested list of the models in that collection:
         *
         * ```json
         * {
         *   "name": "Super resolution",
         *   "slug": "super-resolution",
         *   "description": "Upscaling models that create high-quality images from low-quality images.",
         *   "models": [...]
         * }
         * ```
         */
        get: operations['collections.get'];
    };
    '/v1/hardware': {
        /**
         * List available hardware for models
         * @description Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/hardware
         * ```
         *
         * The response will be a JSON array of hardware objects:
         *
         * ```json
         * [
         *     {"name": "CPU", "sku": "cpu"},
         *     {"name": "Nvidia T4 GPU", "sku": "gpu-t4"},
         *     {"name": "Nvidia A40 GPU", "sku": "gpu-a40-small"},
         *     {"name": "Nvidia A40 (Large) GPU", "sku": "gpu-a40-large"},
         * ]
         * ```
         */
        get: operations['hardware.list'];
    };
    '/v1/models': {
        /**
         * List public models
         * @description Get a paginated list of public models.
         *
         * Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/models
         * ```
         *
         * The response will be a paginated JSON array of model objects:
         *
         * ```json
         * {
         *   "next": null,
         *   "previous": null,
         *   "results": [
         *     {
         *       "url": "https://replicate.com/replicate/hello-world",
         *       "owner": "replicate",
         *       "name": "hello-world",
         *       "description": "A tiny model that says hello",
         *       "visibility": "public",
         *       "github_url": "https://github.com/replicate/cog-examples",
         *       "paper_url": null,
         *       "license_url": null,
         *       "run_count": 5681081,
         *       "cover_image_url": "...",
         *       "default_example": {...},
         *       "latest_version": {...}
         *     }
         *   ]
         * }
         * ```
         *
         * The `cover_image_url` string is an HTTPS URL for an image file. This can be:
         *
         * - An image uploaded by the model author.
         * - The output file of the example prediction, if the model author has not set a cover image.
         * - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.
         * - A generic fallback image.
         */
        get: operations['models.list'];
        /**
         * Create a model
         * @description Create a model.
         *
         * Example cURL request:
         *
         * ```console
         * curl -s -X POST \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   -d '{"owner": "alice" "name": "my-model", "description": "An example model", "visibility": "public", "hardware": "cpu"}' \
         *   https://api.replicate.com/v1/models
         * ```
         *
         * The response will be a model object in the following format:
         *
         * ```json
         * {
         *   "url": "https://replicate.com/alice/my-model",
         *   "owner": "alice",
         *   "name": "my-model",
         *   "description": "An example model",
         *   "visibility": "public",
         *   "github_url": null,
         *   "paper_url": null,
         *   "license_url": null,
         *   "run_count": 0,
         *   "cover_image_url": null,
         *   "default_example": null,
         *   "latest_version": null,
         * }
         * ```
         */
        post: operations['models.create'];
    };
    '/v1/models/{model_owner}/{model_name}': {
        /**
         * Get a model
         * @description Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/models/replicate/hello-world
         * ```
         *
         * The response will be a model object in the following format:
         *
         * ```json
         * {
         *   "url": "https://replicate.com/replicate/hello-world",
         *   "owner": "replicate",
         *   "name": "hello-world",
         *   "description": "A tiny model that says hello",
         *   "visibility": "public",
         *   "github_url": "https://github.com/replicate/cog-examples",
         *   "paper_url": null,
         *   "license_url": null,
         *   "run_count": 5681081,
         *   "cover_image_url": "...",
         *   "default_example": {...},
         *   "latest_version": {...},
         * }
         * ```
         *
         * The `cover_image_url` string is an HTTPS URL for an image file. This can be:
         *
         * - An image uploaded by the model author.
         * - The output file of the example prediction, if the model author has not set a cover image.
         * - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.
         * - A generic fallback image.
         *
         * The `default_example` object is a [prediction](#predictions.get) created with this model.
         *
         * The `latest_version` object is the model's most recently pushed [version](#models.versions.get).
         */
        get: operations['models.get'];
    };
    '/v1/models/{model_owner}/{model_name}/versions': {
        /**
         * List model versions
         * @description Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/models/replicate/hello-world/versions
         * ```
         *
         * The response will be a JSON array of model version objects, sorted with the most recent version first:
         *
         * ```json
         * {
         *   "next": null,
         *   "previous": null,
         *   "results": [
         *     {
         *       "id": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
         *       "created_at": "2022-04-26T19:29:04.418669Z",
         *       "cog_version": "0.3.0",
         *       "openapi_schema": {...}
         *     }
         *   ]
         * }
         * ```
         */
        get: operations['models.versions.list'];
    };
    '/v1/models/{model_owner}/{model_name}/versions/{version_id}': {
        /**
         * Get a model version
         * @description Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa
         * ```
         *
         * The response will be the version object:
         *
         * ```json
         * {
         *   "id": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
         *   "created_at": "2022-04-26T19:29:04.418669Z",
         *   "cog_version": "0.3.0",
         *   "openapi_schema": {...}
         * }
         * ```
         *
         * Every model describes its inputs and outputs with [OpenAPI Schema Objects](https://spec.openapis.org/oas/latest.html#schemaObject) in the `openapi_schema` property.
         *
         * The `openapi_schema.components.schemas.Input` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:
         *
         * ```json
         * {
         *   "type": "object",
         *   "title": "Input",
         *   "required": [
         *     "text"
         *   ],
         *   "properties": {
         *     "text": {
         *       "x-order": 0,
         *       "type": "string",
         *       "title": "Text",
         *       "description": "Text to prefix with 'hello '"
         *     }
         *   }
         * }
         * ```
         *
         * The `openapi_schema.components.schemas.Output` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:
         *
         * ```json
         * {
         *   "type": "string",
         *   "title": "Output"
         * }
         * ```
         *
         * For more details, see the docs on [Cog's supported input and output types](https://github.com/replicate/cog/blob/75b7802219e7cd4cee845e34c4c22139558615d4/docs/python.md#input-and-output-types)
         */
        get: operations['models.versions.get'];
        /**
         * Delete a model version
         * @description Delete a model version and all associated predictions, including all output files.
         *
         * Model version deletion has some restrictions:
         *
         * - You can only delete versions from models you own.
         * - You can only delete versions from private models.
         * - You cannot delete a version if someone other than you has run predictions with it.
         *
         * Example cURL request:
         *
         * ```command
         * curl -s -X DELETE \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa
         * ```
         *
         * The response will be an empty 202, indicating the deletion request has been accepted. It might take a few minutes to be processed.
         */
        delete: operations['models.versions.delete'];
    };
    '/v1/models/{model_owner}/{model_name}/versions/{version_id}/trainings': {
        /**
         * Create a training
         * @description Start a new training of the model version you specify.
         *
         * Example request body:
         *
         * ```json
         * {
         *   "destination": "{new_owner}/{new_name}",
         *   "input": {
         *     "train_data": "https://example.com/my-input-images.zip",
         *   },
         *   "webhook": "https://example.com/my-webhook",
         * }
         * ```
         *
         * Example cURL request:
         *
         * ```console
         * curl -s -X POST \
         *   -d '{"destination": "{new_owner}/{new_name}", "input": {"input_images": "https://example.com/my-input-images.zip"}}' \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   -H 'Content-Type: application/json' \
         *   https://api.replicate.com/v1/models/stability-ai/sdxl/versions/da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf/trainings
         * ```
         *
         * The response will be the training object:
         *
         * ```json
         * {
         *   "id": "zz4ibbonubfz7carwiefibzgga",
         *   "model": "stability-ai/sdxl",
         *   "version": "da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf",
         *   "input": {
         *     "input_images": "https://example.com/my-input-images.zip"
         *   },
         *   "logs": "",
         *   "error": null,
         *   "status": "starting",
         *   "created_at": "2023-09-08T16:32:56.990893084Z",
         *   "urls": {
         *     "cancel": "https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga/cancel",
         *     "get": "https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga"
         *   }
         * }
         * ```
         *
         * As models can take several minutes or more to train, the result will not be available immediately. To get the final result of the training you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a training](#trainings.get) endpoint until it has finished.
         *
         * When a training completes, it creates a new [version](https://replicate.com/docs/how-does-replicate-work#terminology) of the model at the specified destination.
         *
         * To find some models to train on, check out the [trainable language models collection](https://replicate.com/collections/trainable-language-models).
         */
        post: operations['trainings.create'];
    };
    '/v1/predictions': {
        /**
         * List predictions
         * @description Get a paginated list of predictions that you've created. This will include predictions created from the API and the website. It will return 100 records per page.
         *
         * Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/predictions
         * ```
         *
         * The response will be a paginated JSON array of prediction objects, sorted with the most recent prediction first:
         *
         * ```json
         * {
         *   "next": null,
         *   "previous": null,
         *   "results": [
         *     {
         *       "completed_at": "2023-09-08T16:19:34.791859Z",
         *       "created_at": "2023-09-08T16:19:34.907244Z",
         *       "error": null,
         *       "id": "gm3qorzdhgbfurvjtvhg6dckhu",
         *       "input": {
         *         "text": "Alice"
         *       },
         *       "metrics": {
         *         "predict_time": 0.012683
         *       },
         *       "output": "hello Alice",
         *       "started_at": "2023-09-08T16:19:34.779176Z",
         *       "source": "api",
         *       "status": "succeeded",
         *       "urls": {
         *         "get": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu",
         *         "cancel": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel"
         *       },
         *       "model": "replicate/hello-world",
         *       "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
         *     }
         *   ]
         * }
         * ```
         *
         * `id` will be the unique ID of the prediction.
         *
         * `source` will indicate how the prediction was created. Possible values are `web` or `api`.
         *
         * `status` will be the status of the prediction. Refer to [get a single prediction](#predictions.get) for possible values.
         *
         * `urls` will be a convenience object that can be used to construct new API requests for the given prediction.
         *
         * `model` will be the model identifier string in the format of `{model_owner}/{model_name}`.
         *
         * `version` will be the unique ID of model version used to create the prediction.
         */
        get: operations['predictions.list'];
        /**
         * Create a prediction
         * @description Start a new prediction for the model version and inputs you provide.
         *
         * Example request body:
         *
         * ```json
         * {
         *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
         *   "input": {
         *     "text": "Alice"
         *   }
         * }
         * ```
         *
         * Example cURL request:
         *
         * ```console
         * curl -s -X POST \
         *   -d '{"version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa", "input": {"text": "Alice"}}' \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   -H 'Content-Type: application/json' \
         *   https://api.replicate.com/v1/predictions
         * ```
         *
         * The response will be the prediction object:
         *
         * ```json
         * {
         *   "id": "gm3qorzdhgbfurvjtvhg6dckhu",
         *   "model": "replicate/hello-world",
         *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
         *   "input": {
         *     "text": "Alice"
         *   },
         *   "logs": "",
         *   "error": null,
         *   "status": "starting",
         *   "created_at": "2023-09-08T16:19:34.765994657Z",
         *   "urls": {
         *     "cancel": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel",
         *     "get": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu"
         *   }
         * }
         * ```
         *
         * As models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.
         *
         * Input and output (including any files) will be automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.
         *
         * Output files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.
         */
        post: operations['predictions.create'];
    };
    '/v1/predictions/{prediction_id}': {
        /**
         * Get a prediction
         * @description Get the current state of a prediction.
         *
         * Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu
         * ```
         *
         * The response will be the prediction object:
         *
         * ```json
         * {
         *   "id": "gm3qorzdhgbfurvjtvhg6dckhu",
         *   "model": "replicate/hello-world",
         *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
         *   "input": {
         *     "text": "Alice"
         *   },
         *   "logs": "",
         *   "output": "hello Alice",
         *   "error": null,
         *   "status": "succeeded",
         *   "created_at": "2023-09-08T16:19:34.765994Z",
         *   "started_at": "2023-09-08T16:19:34.779176Z",
         *   "completed_at": "2023-09-08T16:19:34.791859Z",
         *   "metrics": {
         *     "predict_time": 0.012683
         *   },
         *   "urls": {
         *     "cancel": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel",
         *     "get": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu"
         *   }
         * }
         * ```
         *
         * `status` will be one of:
         *
         * - `starting`: the prediction is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the prediction.
         * - `processing`: the `predict()` method of the model is currently running.
         * - `succeeded`: the prediction completed successfully.
         * - `failed`: the prediction encountered an error during processing.
         * - `canceled`: the prediction was canceled by its creator.
         *
         * In the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.
         *
         * In the case of failure, `error` will contain the error encountered during the prediction.
         *
         * Terminated predictions (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the prediction used while running. It won't include time waiting for the prediction to start.
         *
         * Input and output (including any files) are automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.
         *
         * Output files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.
         */
        get: operations['predictions.get'];
    };
    '/v1/predictions/{prediction_id}/cancel': {
        /** Cancel a prediction */
        post: operations['predictions.cancel'];
    };
    '/v1/trainings': {
        /**
         * List trainings
         * @description Get a paginated list of trainings that you've created. This will include trainings created from the API and the website. It will return 100 records per page.
         *
         * Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/trainings
         * ```
         *
         * The response will be a paginated JSON array of training objects, sorted with the most recent training first:
         *
         * ```json
         * {
         *   "next": null,
         *   "previous": null,
         *   "results": [
         *     {
         *       "completed_at": "2023-09-08T16:41:19.826523Z",
         *       "created_at": "2023-09-08T16:32:57.018467Z",
         *       "error": null,
         *       "id": "zz4ibbonubfz7carwiefibzgga",
         *       "input": {
         *         "input_images": "https://example.com/my-input-images.zip"
         *       },
         *       "metrics": {
         *         "predict_time": 502.713876
         *       },
         *       "output": {
         *         "version": "...",
         *         "weights": "..."
         *       },
         *       "started_at": "2023-09-08T16:32:57.112647Z",
         *       "source": "api",
         *       "status": "succeeded",
         *       "urls": {
         *         "get": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga",
         *         "cancel": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel"
         *       },
         *       "model": "stability-ai/sdxl",
         *       "version": "da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf",
         *     }
         *   ]
         * }
         * ```
         *
         * `id` will be the unique ID of the training.
         *
         * `source` will indicate how the training was created. Possible values are `web` or `api`.
         *
         * `status` will be the status of the training. Refer to [get a single training](#trainings.get) for possible values.
         *
         * `urls` will be a convenience object that can be used to construct new API requests for the given training.
         *
         * `version` will be the unique ID of model version used to create the training.
         */
        get: operations['trainings.list'];
    };
    '/v1/trainings/{training_id}': {
        /**
         * Get a training
         * @description Get the current state of a training.
         *
         * Example cURL request:
         *
         * ```console
         * curl -s \
         *   -H "Authorization: Token <paste-your-token-here>" \
         *   https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga
         * ```
         *
         * The response will be the training object:
         *
         * ```json
         * {
         *   "completed_at": "2023-09-08T16:41:19.826523Z",
         *   "created_at": "2023-09-08T16:32:57.018467Z",
         *   "error": null,
         *   "id": "zz4ibbonubfz7carwiefibzgga",
         *   "input": {
         *     "input_images": "https://example.com/my-input-images.zip"
         *   },
         *   "logs": "...",
         *   "metrics": {
         *     "predict_time": 502.713876
         *   },
         *   "output": {
         *     "version": "...",
         *     "weights": "..."
         *   },
         *   "started_at": "2023-09-08T16:32:57.112647Z",
         *   "status": "succeeded",
         *   "urls": {
         *     "get": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga",
         *     "cancel": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel"
         *   },
         *   "model": "stability-ai/sdxl",
         *   "version": "da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf",
         * }
         * ```
         *
         * `status` will be one of:
         *
         * - `starting`: the training is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the training.
         * - `processing`: the `train()` method of the model is currently running.
         * - `succeeded`: the training completed successfully.
         * - `failed`: the training encountered an error during processing.
         * - `canceled`: the training was canceled by its creator.
         *
         * In the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.
         *
         * In the case of failure, `error` will contain the error encountered during the training.
         *
         * Terminated trainings (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the training used while running. It won't include time waiting for the training to start.
         */
        get: operations['trainings.get'];
    };
    '/v1/trainings/{training_id}/cancel': {
        /** Cancel a training */
        post: operations['trainings.cancel'];
    };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /**
     * List collections of models
     * @description Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/collections
     * ```
     *
     * The response will be a paginated JSON list of collection objects:
     *
     * ```json
     * {
     *   "next": "null",
     *   "previous": null,
     *   "results": [
     *     {
     *       "name": "Super resolution",
     *       "slug": "super-resolution",
     *       "description": "Upscaling models that create high-quality images from low-quality images."
     *     }
     *   ]
     * }
     * ```
     */
    'collections.list': {
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Get a collection of models
     * @description Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/collections/super-resolution
     * ```
     *
     * The response will be a collection object with a nested list of the models in that collection:
     *
     * ```json
     * {
     *   "name": "Super resolution",
     *   "slug": "super-resolution",
     *   "description": "Upscaling models that create high-quality images from low-quality images.",
     *   "models": [...]
     * }
     * ```
     */
    'collections.get': {
        parameters: {
            path: {
                /** @description The slug of the collection, like `super-resolution` or `image-restoration`. See [replicate.com/collections](https://replicate.com/collections). */
                collection_slug: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * List available hardware for models
     * @description Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/hardware
     * ```
     *
     * The response will be a JSON array of hardware objects:
     *
     * ```json
     * [
     *     {"name": "CPU", "sku": "cpu"},
     *     {"name": "Nvidia T4 GPU", "sku": "gpu-t4"},
     *     {"name": "Nvidia A40 GPU", "sku": "gpu-a40-small"},
     *     {"name": "Nvidia A40 (Large) GPU", "sku": "gpu-a40-large"},
     * ]
     * ```
     */
    'hardware.list': {
        responses: {
            /** @description Success */
            200: {
                content: {
                    'application/json': {
                        /** @description The name of the hardware. */
                        name?: string;
                        /** @description The SKU of the hardware. */
                        sku?: string;
                    }[];
                };
            };
        };
    };
    /**
     * List public models
     * @description Get a paginated list of public models.
     *
     * Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/models
     * ```
     *
     * The response will be a paginated JSON array of model objects:
     *
     * ```json
     * {
     *   "next": null,
     *   "previous": null,
     *   "results": [
     *     {
     *       "url": "https://replicate.com/replicate/hello-world",
     *       "owner": "replicate",
     *       "name": "hello-world",
     *       "description": "A tiny model that says hello",
     *       "visibility": "public",
     *       "github_url": "https://github.com/replicate/cog-examples",
     *       "paper_url": null,
     *       "license_url": null,
     *       "run_count": 5681081,
     *       "cover_image_url": "...",
     *       "default_example": {...},
     *       "latest_version": {...}
     *     }
     *   ]
     * }
     * ```
     *
     * The `cover_image_url` string is an HTTPS URL for an image file. This can be:
     *
     * - An image uploaded by the model author.
     * - The output file of the example prediction, if the model author has not set a cover image.
     * - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.
     * - A generic fallback image.
     */
    'models.list': {
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Create a model
     * @description Create a model.
     *
     * Example cURL request:
     *
     * ```console
     * curl -s -X POST \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   -d '{"owner": "alice" "name": "my-model", "description": "An example model", "visibility": "public", "hardware": "cpu"}' \
     *   https://api.replicate.com/v1/models
     * ```
     *
     * The response will be a model object in the following format:
     *
     * ```json
     * {
     *   "url": "https://replicate.com/alice/my-model",
     *   "owner": "alice",
     *   "name": "my-model",
     *   "description": "An example model",
     *   "visibility": "public",
     *   "github_url": null,
     *   "paper_url": null,
     *   "license_url": null,
     *   "run_count": 0,
     *   "cover_image_url": null,
     *   "default_example": null,
     *   "latest_version": null,
     * }
     * ```
     */
    'models.create': {
        requestBody: {
            content: {
                'application/json': {
                    /** @description A URL for the model's cover image. This should be an image file. */
                    cover_image_url?: string;
                    /** @description A description of the model. */
                    description?: string;
                    /** @description A URL for the model's source code on GitHub. */
                    github_url?: string;
                    /** @description The SKU for the hardware used to run the model. Possible values can be retrieved from the `hardware.list` endpoint. */
                    hardware: string;
                    /** @description A URL for the model's license. */
                    license_url?: string;
                    /** @description The name of the model. This must be unique among all models owned by the user or organization. */
                    name: string;
                    /** @description The name of the user or organization that will own the model. This must be the same as the user or organization that is making the API request. In other words, the API token used in the request must belong to this user or organization. */
                    owner: string;
                    /** @description A URL for the model's paper. */
                    paper_url?: string;
                    /**
                     * @description Whether the model should be public or private. A public model can be viewed and run by anyone, whereas a private model can be viewed and run only by the user or organization members that own the model.
                     * @enum {string}
                     */
                    visibility: 'public' | 'private';
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
                content: never;
            };
        };
    };
    /**
     * Get a model
     * @description Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/models/replicate/hello-world
     * ```
     *
     * The response will be a model object in the following format:
     *
     * ```json
     * {
     *   "url": "https://replicate.com/replicate/hello-world",
     *   "owner": "replicate",
     *   "name": "hello-world",
     *   "description": "A tiny model that says hello",
     *   "visibility": "public",
     *   "github_url": "https://github.com/replicate/cog-examples",
     *   "paper_url": null,
     *   "license_url": null,
     *   "run_count": 5681081,
     *   "cover_image_url": "...",
     *   "default_example": {...},
     *   "latest_version": {...},
     * }
     * ```
     *
     * The `cover_image_url` string is an HTTPS URL for an image file. This can be:
     *
     * - An image uploaded by the model author.
     * - The output file of the example prediction, if the model author has not set a cover image.
     * - The input file of the example prediction, if the model author has not set a cover image and the example prediction has no output file.
     * - A generic fallback image.
     *
     * The `default_example` object is a [prediction](#predictions.get) created with this model.
     *
     * The `latest_version` object is the model's most recently pushed [version](#models.versions.get).
     */
    'models.get': {
        parameters: {
            path: {
                /** @description The name of the user or organization that owns the model. */
                model_owner: string;
                /** @description The name of the model. */
                model_name: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * List model versions
     * @description Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/models/replicate/hello-world/versions
     * ```
     *
     * The response will be a JSON array of model version objects, sorted with the most recent version first:
     *
     * ```json
     * {
     *   "next": null,
     *   "previous": null,
     *   "results": [
     *     {
     *       "id": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
     *       "created_at": "2022-04-26T19:29:04.418669Z",
     *       "cog_version": "0.3.0",
     *       "openapi_schema": {...}
     *     }
     *   ]
     * }
     * ```
     */
    'models.versions.list': {
        parameters: {
            path: {
                /** @description The name of the user or organization that owns the model. */
                model_owner: string;
                /** @description The name of the model. */
                model_name: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Get a model version
     * @description Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa
     * ```
     *
     * The response will be the version object:
     *
     * ```json
     * {
     *   "id": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
     *   "created_at": "2022-04-26T19:29:04.418669Z",
     *   "cog_version": "0.3.0",
     *   "openapi_schema": {...}
     * }
     * ```
     *
     * Every model describes its inputs and outputs with [OpenAPI Schema Objects](https://spec.openapis.org/oas/latest.html#schemaObject) in the `openapi_schema` property.
     *
     * The `openapi_schema.components.schemas.Input` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:
     *
     * ```json
     * {
     *   "type": "object",
     *   "title": "Input",
     *   "required": [
     *     "text"
     *   ],
     *   "properties": {
     *     "text": {
     *       "x-order": 0,
     *       "type": "string",
     *       "title": "Text",
     *       "description": "Text to prefix with 'hello '"
     *     }
     *   }
     * }
     * ```
     *
     * The `openapi_schema.components.schemas.Output` property for the [replicate/hello-world](https://replicate.com/replicate/hello-world) model looks like this:
     *
     * ```json
     * {
     *   "type": "string",
     *   "title": "Output"
     * }
     * ```
     *
     * For more details, see the docs on [Cog's supported input and output types](https://github.com/replicate/cog/blob/75b7802219e7cd4cee845e34c4c22139558615d4/docs/python.md#input-and-output-types)
     */
    'models.versions.get': {
        parameters: {
            path: {
                /** @description The name of the user or organization that owns the model. */
                model_owner: string;
                /** @description The name of the model. */
                model_name: string;
                /** @description The ID of the version. */
                version_id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Delete a model version
     * @description Delete a model version and all associated predictions, including all output files.
     *
     * Model version deletion has some restrictions:
     *
     * - You can only delete versions from models you own.
     * - You can only delete versions from private models.
     * - You cannot delete a version if someone other than you has run predictions with it.
     *
     * Example cURL request:
     *
     * ```command
     * curl -s -X DELETE \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/models/replicate/hello-world/versions/5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa
     * ```
     *
     * The response will be an empty 202, indicating the deletion request has been accepted. It might take a few minutes to be processed.
     */
    'models.versions.delete': {
        parameters: {
            path: {
                /** @description The name of the user or organization that owns the model. */
                model_owner: string;
                /** @description The name of the model. */
                model_name: string;
                /** @description The ID of the version. */
                version_id: string;
            };
        };
        responses: {
            /** @description Deletion request has been accepted. It might take a few minutes to be processed. */
            202: {
                content: never;
            };
        };
    };
    /**
     * Create a training
     * @description Start a new training of the model version you specify.
     *
     * Example request body:
     *
     * ```json
     * {
     *   "destination": "{new_owner}/{new_name}",
     *   "input": {
     *     "train_data": "https://example.com/my-input-images.zip",
     *   },
     *   "webhook": "https://example.com/my-webhook",
     * }
     * ```
     *
     * Example cURL request:
     *
     * ```console
     * curl -s -X POST \
     *   -d '{"destination": "{new_owner}/{new_name}", "input": {"input_images": "https://example.com/my-input-images.zip"}}' \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   -H 'Content-Type: application/json' \
     *   https://api.replicate.com/v1/models/stability-ai/sdxl/versions/da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf/trainings
     * ```
     *
     * The response will be the training object:
     *
     * ```json
     * {
     *   "id": "zz4ibbonubfz7carwiefibzgga",
     *   "model": "stability-ai/sdxl",
     *   "version": "da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf",
     *   "input": {
     *     "input_images": "https://example.com/my-input-images.zip"
     *   },
     *   "logs": "",
     *   "error": null,
     *   "status": "starting",
     *   "created_at": "2023-09-08T16:32:56.990893084Z",
     *   "urls": {
     *     "cancel": "https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga/cancel",
     *     "get": "https://api.replicate.com/v1/predictions/zz4ibbonubfz7carwiefibzgga"
     *   }
     * }
     * ```
     *
     * As models can take several minutes or more to train, the result will not be available immediately. To get the final result of the training you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a training](#trainings.get) endpoint until it has finished.
     *
     * When a training completes, it creates a new [version](https://replicate.com/docs/how-does-replicate-work#terminology) of the model at the specified destination.
     *
     * To find some models to train on, check out the [trainable language models collection](https://replicate.com/collections/trainable-language-models).
     */
    'trainings.create': {
        parameters: {
            path: {
                /** @description The name of the user or organization that owns the model. */
                model_owner: string;
                /** @description The name of the model. */
                model_name: string;
                /** @description The ID of the version. */
                version_id: string;
            };
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description A string representing the desired model to push to in the format `{destination_model_owner}/{destination_model_name}`. This should be an existing model owned by the user or organization making the API request. If the destination is invalid, the server will return an appropriate 4XX response. */
                    destination?: string;
                    /** @description An object containing inputs to the Cog model's `train()` function. */
                    input?: Record<string, never>;
                    /** @description An HTTPS URL for receiving a webhook when the training completes. The webhook will be a POST request where the request body is the same as the response body of the [get training](#trainings.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. */
                    webhook?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            201: {
                content: never;
            };
        };
    };
    /**
     * List predictions
     * @description Get a paginated list of predictions that you've created. This will include predictions created from the API and the website. It will return 100 records per page.
     *
     * Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/predictions
     * ```
     *
     * The response will be a paginated JSON array of prediction objects, sorted with the most recent prediction first:
     *
     * ```json
     * {
     *   "next": null,
     *   "previous": null,
     *   "results": [
     *     {
     *       "completed_at": "2023-09-08T16:19:34.791859Z",
     *       "created_at": "2023-09-08T16:19:34.907244Z",
     *       "error": null,
     *       "id": "gm3qorzdhgbfurvjtvhg6dckhu",
     *       "input": {
     *         "text": "Alice"
     *       },
     *       "metrics": {
     *         "predict_time": 0.012683
     *       },
     *       "output": "hello Alice",
     *       "started_at": "2023-09-08T16:19:34.779176Z",
     *       "source": "api",
     *       "status": "succeeded",
     *       "urls": {
     *         "get": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu",
     *         "cancel": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel"
     *       },
     *       "model": "replicate/hello-world",
     *       "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
     *     }
     *   ]
     * }
     * ```
     *
     * `id` will be the unique ID of the prediction.
     *
     * `source` will indicate how the prediction was created. Possible values are `web` or `api`.
     *
     * `status` will be the status of the prediction. Refer to [get a single prediction](#predictions.get) for possible values.
     *
     * `urls` will be a convenience object that can be used to construct new API requests for the given prediction.
     *
     * `model` will be the model identifier string in the format of `{model_owner}/{model_name}`.
     *
     * `version` will be the unique ID of model version used to create the prediction.
     */
    'predictions.list': {
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Create a prediction
     * @description Start a new prediction for the model version and inputs you provide.
     *
     * Example request body:
     *
     * ```json
     * {
     *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
     *   "input": {
     *     "text": "Alice"
     *   }
     * }
     * ```
     *
     * Example cURL request:
     *
     * ```console
     * curl -s -X POST \
     *   -d '{"version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa", "input": {"text": "Alice"}}' \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   -H 'Content-Type: application/json' \
     *   https://api.replicate.com/v1/predictions
     * ```
     *
     * The response will be the prediction object:
     *
     * ```json
     * {
     *   "id": "gm3qorzdhgbfurvjtvhg6dckhu",
     *   "model": "replicate/hello-world",
     *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
     *   "input": {
     *     "text": "Alice"
     *   },
     *   "logs": "",
     *   "error": null,
     *   "status": "starting",
     *   "created_at": "2023-09-08T16:19:34.765994657Z",
     *   "urls": {
     *     "cancel": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel",
     *     "get": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu"
     *   }
     * }
     * ```
     *
     * As models can take several seconds or more to run, the output will not be available immediately. To get the final result of the prediction you should either provide a `webhook` HTTPS URL for us to call when the results are ready, or poll the [get a prediction](#predictions.get) endpoint until it has finished.
     *
     * Input and output (including any files) will be automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.
     *
     * Output files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.
     */
    'predictions.create': {
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description The model's input as a JSON object. The input schema depends on what model you are running. To see the available inputs, click the "API" tab on the model you are running or [get the model version](#models.versions.get) and look at its `openapi_schema` property. For example, [stability-ai/sdxl](https://replicate.com/stability-ai/sdxl) takes `prompt` as an input.
                     *
                     * Files should be passed as HTTP URLs or data URLs.
                     *
                     * Use an HTTP URL when:
                     *
                     * - you have a large file > 256kb
                     * - you want to be able to use the file multiple times
                     * - you want your prediction metadata to be associable with your input files
                     *
                     * Use a data URL when:
                     *
                     * - you have a small file <= 256kb
                     * - you don't want to upload and host the file somewhere
                     * - you don't need to use the file again (Replicate will not store it)
                     */
                    input?: Record<string, never>;
                    /**
                     * @description Request a URL to receive streaming output using [server-sent events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events).
                     *
                     * If the requested model version supports streaming, the returned prediction will have a `stream` entry in its `urls` property with an HTTPS URL that you can use to construct an [`EventSource`](https://developer.mozilla.org/en-US/docs/Web/API/EventSource).
                     */
                    stream?: boolean;
                    /** @description The ID of the model version that you want to run. */
                    version?: string;
                    /** @description An HTTPS URL for receiving a webhook when the prediction has new output. The webhook will be a POST request where the request body is the same as the response body of the [get prediction](#predictions.get) operation. If there are network problems, we will retry the webhook a few times, so make sure it can be safely called more than once. */
                    webhook?: string;
                    /**
                     * @description By default, we will send requests to your webhook URL whenever there are new outputs or the prediction has finished. You can change which events trigger webhook requests by specifying `webhook_events_filter` in the prediction request:
                     *
                     * - `start`: immediately on prediction start
                     * - `output`: each time a prediction generates an output (note that predictions can generate multiple outputs)
                     * - `logs`: each time log output is generated by a prediction
                     * - `completed`: when the prediction reaches a terminal state (succeeded/canceled/failed)
                     *
                     * For example, if you only wanted requests to be sent at the start and end of the prediction, you would provide:
                     *
                     * ```json
                     * {
                     *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
                     *   "input": {
                     *     "text": "Alice"
                     *   },
                     *   "webhook": "https://example.com/my-webhook",
                     *   "webhook_events_filter": ["start", "completed"]
                     * }
                     * ```
                     *
                     * Requests for event types `output` and `logs` will be sent at most once every 500ms. If you request `start` and `completed` webhooks, then they'll always be sent regardless of throttling.
                     */
                    webhook_events_filter?: (
                        | 'start'
                        | 'output'
                        | 'logs'
                        | 'completed'
                    )[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Get a prediction
     * @description Get the current state of a prediction.
     *
     * Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu
     * ```
     *
     * The response will be the prediction object:
     *
     * ```json
     * {
     *   "id": "gm3qorzdhgbfurvjtvhg6dckhu",
     *   "model": "replicate/hello-world",
     *   "version": "5c7d5dc6dd8bf75c1acaa8565735e7986bc5b66206b55cca93cb72c9bf15ccaa",
     *   "input": {
     *     "text": "Alice"
     *   },
     *   "logs": "",
     *   "output": "hello Alice",
     *   "error": null,
     *   "status": "succeeded",
     *   "created_at": "2023-09-08T16:19:34.765994Z",
     *   "started_at": "2023-09-08T16:19:34.779176Z",
     *   "completed_at": "2023-09-08T16:19:34.791859Z",
     *   "metrics": {
     *     "predict_time": 0.012683
     *   },
     *   "urls": {
     *     "cancel": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu/cancel",
     *     "get": "https://api.replicate.com/v1/predictions/gm3qorzdhgbfurvjtvhg6dckhu"
     *   }
     * }
     * ```
     *
     * `status` will be one of:
     *
     * - `starting`: the prediction is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the prediction.
     * - `processing`: the `predict()` method of the model is currently running.
     * - `succeeded`: the prediction completed successfully.
     * - `failed`: the prediction encountered an error during processing.
     * - `canceled`: the prediction was canceled by its creator.
     *
     * In the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.
     *
     * In the case of failure, `error` will contain the error encountered during the prediction.
     *
     * Terminated predictions (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the prediction used while running. It won't include time waiting for the prediction to start.
     *
     * Input and output (including any files) are automatically deleted after an hour, so you must save a copy of any files in the output if you'd like to continue using them.
     *
     * Output files are served by `replicate.delivery` and its subdomains. If you use an allow list of external domains for your assets, add `replicate.delivery` and `*.replicate.delivery` to it.
     */
    'predictions.get': {
        parameters: {
            path: {
                /** @description The ID of the prediction to get. */
                prediction_id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /** Cancel a prediction */
    'predictions.cancel': {
        parameters: {
            path: {
                /** @description The ID of the prediction to cancel. */
                prediction_id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * List trainings
     * @description Get a paginated list of trainings that you've created. This will include trainings created from the API and the website. It will return 100 records per page.
     *
     * Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/trainings
     * ```
     *
     * The response will be a paginated JSON array of training objects, sorted with the most recent training first:
     *
     * ```json
     * {
     *   "next": null,
     *   "previous": null,
     *   "results": [
     *     {
     *       "completed_at": "2023-09-08T16:41:19.826523Z",
     *       "created_at": "2023-09-08T16:32:57.018467Z",
     *       "error": null,
     *       "id": "zz4ibbonubfz7carwiefibzgga",
     *       "input": {
     *         "input_images": "https://example.com/my-input-images.zip"
     *       },
     *       "metrics": {
     *         "predict_time": 502.713876
     *       },
     *       "output": {
     *         "version": "...",
     *         "weights": "..."
     *       },
     *       "started_at": "2023-09-08T16:32:57.112647Z",
     *       "source": "api",
     *       "status": "succeeded",
     *       "urls": {
     *         "get": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga",
     *         "cancel": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel"
     *       },
     *       "model": "stability-ai/sdxl",
     *       "version": "da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf",
     *     }
     *   ]
     * }
     * ```
     *
     * `id` will be the unique ID of the training.
     *
     * `source` will indicate how the training was created. Possible values are `web` or `api`.
     *
     * `status` will be the status of the training. Refer to [get a single training](#trainings.get) for possible values.
     *
     * `urls` will be a convenience object that can be used to construct new API requests for the given training.
     *
     * `version` will be the unique ID of model version used to create the training.
     */
    'trainings.list': {
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /**
     * Get a training
     * @description Get the current state of a training.
     *
     * Example cURL request:
     *
     * ```console
     * curl -s \
     *   -H "Authorization: Token <paste-your-token-here>" \
     *   https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga
     * ```
     *
     * The response will be the training object:
     *
     * ```json
     * {
     *   "completed_at": "2023-09-08T16:41:19.826523Z",
     *   "created_at": "2023-09-08T16:32:57.018467Z",
     *   "error": null,
     *   "id": "zz4ibbonubfz7carwiefibzgga",
     *   "input": {
     *     "input_images": "https://example.com/my-input-images.zip"
     *   },
     *   "logs": "...",
     *   "metrics": {
     *     "predict_time": 502.713876
     *   },
     *   "output": {
     *     "version": "...",
     *     "weights": "..."
     *   },
     *   "started_at": "2023-09-08T16:32:57.112647Z",
     *   "status": "succeeded",
     *   "urls": {
     *     "get": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga",
     *     "cancel": "https://api.replicate.com/v1/trainings/zz4ibbonubfz7carwiefibzgga/cancel"
     *   },
     *   "model": "stability-ai/sdxl",
     *   "version": "da77bc59ee60423279fd632efb4795ab731d9e3ca9705ef3341091fb989b7eaf",
     * }
     * ```
     *
     * `status` will be one of:
     *
     * - `starting`: the training is starting up. If this status lasts longer than a few seconds, then it's typically because a new worker is being started to run the training.
     * - `processing`: the `train()` method of the model is currently running.
     * - `succeeded`: the training completed successfully.
     * - `failed`: the training encountered an error during processing.
     * - `canceled`: the training was canceled by its creator.
     *
     * In the case of success, `output` will be an object containing the output of the model. Any files will be represented as HTTPS URLs. You'll need to pass the `Authorization` header to request them.
     *
     * In the case of failure, `error` will contain the error encountered during the training.
     *
     * Terminated trainings (with a status of `succeeded`, `failed`, or `canceled`) will include a `metrics` object with a `predict_time` property showing the amount of CPU or GPU time, in seconds, that the training used while running. It won't include time waiting for the training to start.
     */
    'trainings.get': {
        parameters: {
            path: {
                /** @description The ID of the training to get. */
                training_id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
    /** Cancel a training */
    'trainings.cancel': {
        parameters: {
            path: {
                /** @description The ID of the training you want to cancel. */
                training_id: string;
            };
        };
        responses: {
            /** @description Success */
            200: {
                content: never;
            };
        };
    };
}
